services:
  traefik:
    image: traefik:latest
    command:
      - "--api.dashboard=true"
      - "--log.level=INFO"
      - "--providers.docker=true"
      - "--providers.docker.network=web"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=team@courselect.org"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--api.insecure=true"
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/letsencrypt:/letsencrypt
    restart: unless-stopped
    networks:
      - web

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`courselect.org`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
    env_file:
      - .env
    depends_on:
      - backend
    networks:
      - web
      - internal

  backend:
    build:
      context: ./backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`courselect.org`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.strip-api.stripPrefix.prefixes=/api"
      - "traefik.http.routers.backend.middlewares=strip-api@docker"
    env_file:
      - .env
    depends_on:
      - redis
      - python-service
      - db
    networks:
      - internal
      - web

  python-service:
    build:
      context: ./python-services
    labels:
      - "traefik.enable=false"
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - internal

  db:
    build:
      context: ./db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  redis:
    image: redis:7
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    env_file:
      - .env
    volumes:
      - redisdata:/var/lib/redis/data
    networks:
      - internal

volumes:
  pgdata:
  redisdata:
  letsencrypt:

networks:
  web:
    external: true
    name: web
  internal:
    external: false
